//FONCTION QUI CREE LE MENU ET SOUS MENUS DANS L'INTERFACE QUAND ON OUVRE LE DOCUMENT
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('Générer documents');
  menu.addSubMenu(ui.createMenu('\u270D Souscriptions directes')
          .addItem('\u26A1 Tous les docs', 'generateAllDocs')
          .addItem('\u23E9 Envoi mail', 'sendByEmail'))
  .addSeparator()
  menu.addSubMenu(ui.createMenu('\u{1F48C} Offrir bon cadeaux')
          .addItem('\u2B50 Bons cadeaux', 'createGiftCard')
          .addItem('\u2709 Envoi bon par mail', 'sendGiftcardByMail'))
  .addSeparator()
  menu.addSubMenu(ui.createMenu('\u{1F381} Cadeaux activés')
          .addItem('créer attestation', 'giftAttestation')
          .addItem('envoyer attestation', 'sendGiftAttestation'))
  
  //autres icones : checkbox \u2705 ; interdit \u26D4 ; sablier \u231B ; alarme \u23F0 ; 
  //check all unicode refs here : https://unicode.org/emoji/charts/full-emoji-list.html
  menu.addToUi();


}

//test à faire avec onEdit pour automatiser les scripts lorsqu'une nouvelle ligne est créée
//function onEdit(e) {
//var ss = SpreadsheetApp.getActiveSpreadsheet();
//var sheet = e.source.getActiveSheet();
//var row = e.range.getRow();

//  if(e.range.columnStart==1) {
//    sheet.getRange(e.range)

//}

//test pour automatiser la copie des formules dans la nouvelle ligne qui est créée
//pb : copie la formule litéralement, sans changer les références de cellules
//ARRAYFORMULA utilisé à la place (même si pas parfait)
function testFormulas() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName('codes-cadeaux');
  var lRow = sheet.getLastRow(); // 
  Logger.log(lRow);
  var lCol = sheet.getLastColumn(); // store the last column
  var newRange = sheet.getRange(lRow,1,1,lCol); // store the range to copy to
  var prevRange = sheet.getRange(lRow-1,1,1,lCol); // store the range to copy from
  var formulas = prevRange.getFormulas();          // store the formulas to copy from
  
  //newRange.setFormulas(formulas);                // set the formulas on the new row
//ISSUE: copying formula but not changing reference => ex: copy J5=B5/2  to J6 >> J6=B5/2 ... how to increment reference when copying formula ?
}

//FONCTION QUI PERMET DE GENERER LA FACTURE D'APRES TEMPLATE EN UTILISANT LES DONNEES DES LIGNES DES TRANSACTIONS
function createFacture() {
  //id of your document template
  const googleDocTemplate = DriveApp.getFileById('1q9zEVr0Mz3x7ag93grO5Mh795rF_wd3Zi4gmgkpcQzI');
  
  //id of the folder where you want your completed documents stored
  const destinationFolder = DriveApp.getFolderById('1sCQbZSxnD1e28hdwxFinMRYxIXtDn6LX')
  //Here we store the sheet as a variable
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Transactions-sync-HS')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    //if (index === 0) return;
    //Here we skip all the old lines to get the script running faster
    if (index < 140) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[25]) return;
    Logger.log(row)
    //Using the row data in a template literal, we make a copy of our template document in our destinationFolder
    if (row[17] === "Personne physique") {
    var copy = googleDocTemplate.makeCopy(`${row[1]} ${row[2]} - Facture ${row[23]}` , destinationFolder)
    } else {var copy = googleDocTemplate.makeCopy(`${row[7]} - Facture ${row[23]}` , destinationFolder)}
    //Once we have the copy, we then open it using the DocumentApp
    const doc = DocumentApp.openById(copy.getId())
    //All of the content lives in the body, so we get that for editing
    const body = doc.getBody();
    //In this line we do some friendly date formatting, that may or may not work for you locale
    const friendlyDate = new Date(row[16]).toLocaleDateString();

    if (row[17] === "Personne physique") {
    //In these lines, we replace our replacement tokens with values from our spreadsheet row
    body.replaceText('{{Prénom}}', row[2]);
    body.replaceText('{{Nom}}', row[1]);
    body.replaceText('{{Adresse}}', row[3]);
    body.replaceText('{{Code postal}}', row[4]);
    body.replaceText('{{Ville}}', row[5]);
    body.replaceText('{{Pays}}', row[6]);
    body.replaceText('{{Nombre actions}}', row[10]);
    body.replaceText('{{Réf facture}}', row[23]);
    body.replaceText('{{Date virement}}', friendlyDate);
    body.replaceText('{{Frais HT}}', row[14]);
    body.replaceText('{{Frais TTC}}', row[13]);
    body.replaceText('{{TVA}}', row[15]);
    } else {
    body.replaceText('{{Prénom}}', row[7]);
    body.replaceText('{{Nom}}', "");
    body.replaceText('{{Adresse}}', row[8]);
    body.replaceText('{{Code postal}}', "");
    body.replaceText('{{Ville}}', row[9]);
    body.replaceText('{{Pays}}', "");
    body.replaceText('{{Nombre actions}}', row[10]);
    body.replaceText('{{Réf facture}}', row[23]);
    body.replaceText('{{Date virement}}', friendlyDate);
    body.replaceText('{{Frais HT}}', row[14]);
    body.replaceText('{{Frais TTC}}', row[13]);
    body.replaceText('{{TVA}}', row[15]);
    }
    //We make our changes permanent by saving and closing the document
    doc.saveAndClose();
    //open the doc as pdf ?
    var docPdf = doc.getAs('application/pdf');
    docPdf.setName(doc.getName() + ".pdf");
    var file = DriveApp.createFile(docPdf);
    var fileId = file.getId();
    DriveApp.getFileById(fileId).moveTo(destinationFolder);

    //Store the url of our new document in a variable
    const url = file.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index + 1, 26).setValue(url);
    //Write the ID of the pdf document in the right column
    sheet.getRange(index + 1, 29).setValue(fileId);
    
  })
  
}

//FONCTION QUI PERMET DE GENERER LE RECU FISCAL (SI BESOIN) D'APRES TEMPLATE EN UTILISANT LES DONNEES DES LIGNES DES TRANSACTIONS
function createRecuFiscal() {
  //id of your document template
  const googleDocTemplate = DriveApp.getFileById('1rT60kJfjmUyLMOOZpoknbCAaNpAt6_GpG9fTF9-M2IE');
  
  //id of the folder where you want your completed documents stored
  const destinationFolder = DriveApp.getFolderById('1sCQbZSxnD1e28hdwxFinMRYxIXtDn6LX')
  //Here we store the sheet as a variable
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Transactions-sync-HS')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    //if (index === 0) return;
    //Here we skip all the old lines to get the script running faster
    if (index < 140) return;
    //Here we check if the contact asked for fiscal reduction, if not we skip it
    if (row[18] != true) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[26]) return;
    Logger.log(row)
    //Using the row data in a template literal, we make a copy of our template document in our destinationFolder
    const copy = googleDocTemplate.makeCopy(`${row[1]} ${row[2]} - Reçu fiscal ${row[24]}` , destinationFolder)
    //Once we have the copy, we then open it using the DocumentApp
    const doc = DocumentApp.openById(copy.getId())
    //All of the content lives in the body, so we get that for editing
    const body = doc.getBody();
    //In this line we do some friendly date formatting, that may or may not work for you locale
    const friendlyDate = new Date(row[16]).toLocaleDateString();

    
    //In these lines, we replace our replacement tokens with values from our spreadsheet row
    body.replaceText('{{Prénom}}', row[2]);
    body.replaceText('{{Nom}}', row[1]);
    body.replaceText('{{Adresse}}', row[3]);
    body.replaceText('{{Code postal}}', row[4]);
    body.replaceText('{{Ville}}', row[5]);
    body.replaceText('{{Pays}}', row[6]);
    body.replaceText('{{Nombre actions}}', row[10]);
    body.replaceText('{{Réf recu fiscal}}', row[24]);
    body.replaceText('{{Date virement}}', friendlyDate);
    body.replaceText('{{Montant hors frais}}', row[12]);


    //We make our changes permanent by saving and closing the document
    doc.saveAndClose();
    //open the doc as pdf ?
    var docPdf = doc.getAs('application/pdf');
    docPdf.setName(doc.getName() + ".pdf");
    var file = DriveApp.createFile(docPdf);
    var fileId = file.getId();
    DriveApp.getFileById(fileId).moveTo(destinationFolder);

    //Store the url of our new document in a variable
    const url = file.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index + 1, 27).setValue(url);
    //Write the ID of the pdf document in the right column
    sheet.getRange(index + 1, 30).setValue(fileId);
    
  })
  
}

//FONCTION QUI PERMET DE GENERER L'ATTESTATION D'APRES TEMPLATE EN UTILISANT LES DONNEES DES LIGNES DES TRANSACTIONS
function createAttestation() {
  //id of your document template
  const googleDocTemplate = DriveApp.getFileById('1JN0uikLxJORDh6UzyXAy-8h1dW97T9d-d_SEiq5b9Xo');
  
  //id of the folder where you want your completed documents stored
  const destinationFolder = DriveApp.getFolderById('1sCQbZSxnD1e28hdwxFinMRYxIXtDn6LX')
  //Here we store the sheet as a variable
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Transactions-sync-HS')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    //if (index === 0) return;
    //Here we skip all the old lines to get the script running faster
    if (index < 140) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[27]) return;
    Logger.log(row)
    //Using the row data in a template literal, we make a copy of our template document in our destinationFolder
    if (row[17] === "Personne physique") {
    var copy = googleDocTemplate.makeCopy(`${row[1]} ${row[2]} - Attestation ${row[23]}` , destinationFolder)
    } else {var copy = googleDocTemplate.makeCopy(`${row[7]} - Attestation ${row[23]}` , destinationFolder)}
    //Once we have the copy, we then open it using the DocumentApp
    const doc = DocumentApp.openById(copy.getId())
    //All of the content lives in the body, so we get that for editing
    const body = doc.getBody();
    //In this line we do some friendly date formatting, that may or may not work for you locale
    const friendlyDate = new Date(row[16]).toLocaleDateString();

    
    //In these lines, we replace our replacement tokens with values from our spreadsheet row, depending on the type of person
    if (row[17] === "Personne physique") {
    body.replaceText('{{Prénom}}', row[2]);
    body.replaceText('{{Nom}}', row[1]);
    body.replaceText('{{Adresse}}', row[3]);
    body.replaceText('{{Code postal}}', row[4]);
    body.replaceText('{{Ville}}', row[5]);
    body.replaceText('{{Pays}}', row[6]);
    body.replaceText('{{Nombre actions}}', row[10]);
    body.replaceText('{{Réf recu fiscal}}', row[24]);
    body.replaceText('{{Date virement}}', friendlyDate);
    body.replaceText('{{Montant hors frais}}', row[12]);
    body.replaceText('{{Montant avec frais}}', row[11]);
    body.replaceText('{{Frais TTC}}', row[13]);
    } else {
    body.replaceText('{{Prénom}}', row[7]);
    body.replaceText('{{Nom}}', "");
    body.replaceText('{{Adresse}}', row[8]);
    body.replaceText('{{Code postal}}', "");
    body.replaceText('{{Ville}}', row[9]);
    body.replaceText('{{Pays}}', "");
    body.replaceText('{{Nombre actions}}', row[10]);
    body.replaceText('{{Réf recu fiscal}}', row[24]);
    body.replaceText('{{Date virement}}', friendlyDate);
    body.replaceText('{{Montant hors frais}}', row[12]);
    body.replaceText('{{Montant avec frais}}', row[11]);
    body.replaceText('{{Frais TTC}}', row[13]);     
    }

    //We make our changes permanent by saving and closing the document
    doc.saveAndClose();
    //open the doc as pdf
    var docPdf = doc.getAs('application/pdf');
    docPdf.setName(doc.getName() + ".pdf");
    var file = DriveApp.createFile(docPdf);
    var fileId = file.getId();
    DriveApp.getFileById(fileId).moveTo(destinationFolder);

    //Store the url of our new document in a variable
    const url = file.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index + 1, 28).setValue(url)
    //Write the ID of the pdf document in the right column
    sheet.getRange(index + 1, 31).setValue(file.getId())
  })
  
}

//FONCTION QUI PERMET D'ENVOYER LES DOCUMENTS EN PJ AVEC TEMPLATE DE MAIL
function sendByEmail() {
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Transactions-sync-HS')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  var emailQuotaRemaining = MailApp.getRemainingDailyQuota();
  Logger.log("Remaining email quota: " + emailQuotaRemaining);

  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a mail has already been sent, if so we skip it
    if (row[31]) return;
    //define email information
    var emailAddress = row[0];
    var emailSubject = "SCA LES FEVES - Vos documents de souscription";
    var message = "Bonjour, vous trouverez ci-joint les documents liés à votre souscription à la SCA LES FEVES. Toute l'équipe vous souhaite à nouveau la bienvenue dans l'aventure. Bien cordialement, Vincent KRAUS"
    //create attachments array with files generated by other functions
    var attachments = [];
    var facture = DriveApp.getFileById(row[28]).getAs(MimeType.PDF);
    if (row[26]) {var recu = DriveApp.getFileById(row[29]).getAs(MimeType.PDF);} else {}
    var attestation = DriveApp.getFileById(row[30]).getAs(MimeType.PDF);
    if (row[26]) {
      attachments.push(facture, recu, attestation)
    } else {
      attachments.push(facture, attestation);
    }

    //create message body from template file
    var htmlBody = HtmlService.createTemplateFromFile('mail_template');
    htmlBody.firstname = row[2];
    htmlBody.nb_actions = row[10];
    htmlBody.deduction = row[18]=== true;
    Logger.log(htmlBody.deduction);
    // evaluate and get the html
    var email_html = htmlBody.evaluate().getContent();

    //send email
    MailApp.sendEmail(emailAddress, emailSubject, message, {htmlBody: email_html, attachments: attachments, bcc:'investir@feve.co',});
    var nowDate = new Date();
    sheet.getRange(index + 1, 32).setValue(nowDate);




  })

}

//FONCTION QUI LANCE LES 3 FONCTIONS QUI GENERENT LES DOCUMENTS
function generateAllDocs(){
  var ui = SpreadsheetApp.getUi();
  var response = ui.alert('Voulez-vous vraiment générer tous les documents ?', ui.ButtonSet.YES_NO);

   // Process the user's response.
 if (response == ui.Button.YES) {
   Logger.log('The user clicked "Yes."');
    createFacture();
    createRecuFiscal();
    createAttestation();
 } else {
   Logger.log('The user clicked "No" or the close button in the dialog\'s title bar.');
 };

}

//FONCTION POUR GENERER LE BON CADEAU AVEC LES INFOS DES LIGNES DE L'ONGLET CODES CADEAUX
function createGiftCard() {
  //id of your document template
  const googleSlideTemplate = DriveApp.getFileById('1dX3MFrq2L7El8o-kQRE2MxGEaK6C-DPf09XOGRUOeww');
  
  //id of the folder where you want your completed documents stored
  const destinationFolder = DriveApp.getFolderById('1J53oerGYn9CzSZoom3YUZNU-9Gt66ko-')
  //Here we store the sheet as a variable
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('codes-cadeaux')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[18]) return;
    Logger.log(row)
    //Using the row data in a template literal, we make a copy of our template document in our destinationFolder
    var copy = googleSlideTemplate.makeCopy(`${row[0]} - pour ${row[12]}` , destinationFolder)
    //Once we have the copy, we then open it using the DocumentApp
    const doc = SlidesApp.openById(copy.getId())
    var slides = doc.getSlides();
    var templateSlide1 = slides[0];
    var templateSlide2 = slides[1];
    var shapes1 = templateSlide1.getShapes();
    var shapes2 = templateSlide2.getShapes();
    
    //In these lines, we replace our replacement tokens with values from our spreadsheet row
    shapes1.forEach(function(shape){
    shape.getText().replaceAllText('{{firstname}}', row[12]);
    shape.getText().replaceAllText('{{nb_actions}}', row[3]);
    });

    //same thing for 2nd slide
    shapes2.forEach(function(shape){
    shape.getText().replaceAllText('{{giftcode}}', row[10]);
    shape.getText().replaceAllText('{{offreur}}', row[2]);
    });

    
    //We make our changes permanent by saving and closing the document
    var docID = doc.getId();
    Logger.log(docID);
    doc.saveAndClose();
    //generate pdf copy
    var blob = DriveApp.getFileById(docID).getBlob();
    var docPdf = DriveApp.createFile(blob);
    docPdf.setName(doc.getName() + ".pdf");
    DriveApp.getFileById(docPdf.getId()).moveTo(destinationFolder);

    //Store the url of our new document in a variable
    const url = docPdf.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index + 1, 19).setValue(url);
    //Write the ID of the pdf document in the right column
    sheet.getRange(index + 1, 21).setValue(docPdf.getId());
  
  })

createGiftFacture();
}

//FONCTION POUR GENERER LA FACTURE, UTILE UNIQUEMENT POUR COMPTA OU SI OFFREUR LE DEMANDE
function createGiftFacture() {
  //id of your document template
  const googleDocTemplate = DriveApp.getFileById('1q9zEVr0Mz3x7ag93grO5Mh795rF_wd3Zi4gmgkpcQzI');
  
  //id of the folder where you want your completed documents stored
  const destinationFolder = DriveApp.getFolderById('1J53oerGYn9CzSZoom3YUZNU-9Gt66ko-')
  //Here we store the sheet as a variable
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('codes-cadeaux')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[22]) return;
    Logger.log(row)
    //Using the row data in a template literal, we make a copy of our template document in our destinationFolder
    var copy = googleDocTemplate.makeCopy(`${row[0]} - Facture ${row[16]}` , destinationFolder)
    //Once we have the copy, we then open it using the DocumentApp
    const doc = DocumentApp.openById(copy.getId())
    //All of the content lives in the body, so we get that for editing
    const body = doc.getBody();
    //In this line we do some friendly date formatting, that may or may not work for you locale
    const friendlyDate = new Date(row[9]).toLocaleDateString();
    const friendlyFeesHT = row[7].toFixed(2);
    const friendlyFeesTTC = row[6].toFixed(2);
    const friendlyVAT = row[8].toFixed(2);

    //In these lines, we replace our replacement tokens with values from our spreadsheet row
    body.replaceText('{{Prénom}}', row[2]);
    body.replaceText('{{Nom}}', row[1]);
    body.replaceText('{{Adresse}}', "");
    body.replaceText('{{Code postal}}', "");
    body.replaceText('{{Ville}}', "");
    body.replaceText('{{Pays}}', "");
    body.replaceText('{{Nombre actions}}', row[3]);
    body.replaceText('{{Réf facture}}', row[16]);
    body.replaceText('{{Date virement}}', friendlyDate);
    body.replaceText('{{Frais HT}}', friendlyFeesHT);
    body.replaceText('{{Frais TTC}}', friendlyFeesTTC);
    body.replaceText('{{TVA}}', friendlyVAT);
    
    //We make our changes permanent by saving and closing the document
    doc.saveAndClose();
    //open the doc as pdf ?
    var docPdf = doc.getAs('application/pdf');
    docPdf.setName(doc.getName() + ".pdf");
    var file = DriveApp.createFile(docPdf);
    var fileId = file.getId();
    DriveApp.getFileById(fileId).moveTo(destinationFolder);

    //Store the url of our new document in a variable
    const url = file.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index + 1, 23).setValue(url);
    //Write the ID of the pdf document in the right column
    sheet.getRange(index + 1, 24).setValue(fileId);
    
  })
  
}

//FONCTION POUR ENVOYER LE BON CADEAU EN PJ A L'OFFREUR AVEC LE TEMPLATE DE MAIL
function sendGiftcardByMail() {
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('codes-cadeaux')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  var emailQuotaRemaining = MailApp.getRemainingDailyQuota();
  Logger.log("Remaining email quota: " + emailQuotaRemaining);

  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a mail has already been sent, if so we skip it
    if (row[21]) return;
    //define email information
    var emailAddress = row[0];
    var emailSubject = "Les Feves : votre bon cadeau est prêt !";
    var message = "Bonjour, vous trouverez ci-joint votre bon cadeau pour des actions de la fonciere solidaire Les Feves. Toute l'équipe vous remercie de votre engagement en faveur de la transition agroécologique. Bien cordialement, Vincent KRAUS"
    //create attachments array with files generated by other functions
    var attachments = [];
    var bonCadeau = DriveApp.getFileById(row[20]).getAs(MimeType.PDF);
    attachments.push(bonCadeau);

    //create message body from template file
    var htmlBody = HtmlService.createTemplateFromFile('mail_cadeau_template');
    htmlBody.firstname = row[2];
    htmlBody.nb_actions = row[3];
    htmlBody.destinataire = row[12];
    // evaluate and get the html
    var email_html = htmlBody.evaluate().getContent();

    //send email
    MailApp.sendEmail(emailAddress, emailSubject, message, {htmlBody: email_html, attachments: attachments, bcc:'investir@feve.co',});
    var nowDate = new Date();
    sheet.getRange(index + 1, 22).setValue(nowDate);




  })

}

//FONCTION POUR GENERER L'ATTESTATION DE SOUSCRIPTION POUR LA PERSONNE AYANT ACTIVE SON BON CADEAU
function giftAttestation() {
  //id of your document template
  const googleDocTemplate = DriveApp.getFileById('1ZDgSntL715KCna4zrrWBdPFEPOzKD5DCGfvyJVQyz60');
  
  //id of the folder where you want your completed documents stored
  const destinationFolder = DriveApp.getFolderById('1sCQbZSxnD1e28hdwxFinMRYxIXtDn6LX')
  //Here we store the sheet as a variable
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Cadeaux-actives-sync-HS')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  
  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
    if (row[12]) return;
    Logger.log(row)
    //Using the row data in a template literal, we make a copy of our template document in our destinationFolder
    var copy = googleDocTemplate.makeCopy(`${row[1]} - Attestation ${row[10]}` , destinationFolder)
    //Once we have the copy, we then open it using the DocumentApp
    const doc = DocumentApp.openById(copy.getId())
    //All of the content lives in the body, so we get that for editing
    const body = doc.getBody();
    //In this line we do some friendly date formatting, that may or may not work for you locale
    const friendlyDate = new Date(row[9]).toLocaleDateString();

    
    //In these lines, we replace our replacement tokens with values from our spreadsheet row, depending on the type of person
    body.replaceText('{{Prénom}}', row[2]);
    body.replaceText('{{Nom}}', row[1]);
    body.replaceText('{{Adresse}}', row[3]);
    body.replaceText('{{Code postal}}', row[4]);
    body.replaceText('{{Ville}}', row[5]);
    body.replaceText('{{Pays}}', row[6]);
    body.replaceText('{{Nombre actions}}', row[7]);
    body.replaceText('{{Date activation}}', friendlyDate);
    body.replaceText('{{Montant hors frais}}', row[8]);

    

    //We make our changes permanent by saving and closing the document
    doc.saveAndClose();
    //open the doc as pdf
    var docPdf = doc.getAs('application/pdf');
    docPdf.setName(doc.getName() + ".pdf");
    var file = DriveApp.createFile(docPdf);
    var fileId = file.getId();
    DriveApp.getFileById(fileId).moveTo(destinationFolder);

    //Store the url of our new document in a variable
    const url = file.getUrl();
    //Write that value back to the 'Document Link' column in the spreadsheet. 
    sheet.getRange(index + 1, 13).setValue(url)
    //Write the ID of the pdf document in the right column
    sheet.getRange(index + 1, 14).setValue(file.getId())
  })
  
}

//FONCTION POUR ENVOYER L'ATTESTATION EN PJ A LA PERSONNE AYANT ACTIVE SON BON CADEAU, AVEC TEMPLATE DE MAIL
function sendGiftAttestation() {
  const sheet = SpreadsheetApp
    .getActiveSpreadsheet()
    .getSheetByName('Cadeaux-actives-sync-HS')
  
  //Now we get all of the values as a 2D array
  const rows = sheet.getDataRange().getValues();

  var emailQuotaRemaining = MailApp.getRemainingDailyQuota();
  Logger.log("Remaining email quota: " + emailQuotaRemaining);

  //Start processing each spreadsheet row
  rows.forEach(function(row, index){
    //Here we check if this row is the headers, if so we skip it
    if (index === 0) return;
    //Here we check if a mail has already been sent, if so we skip it
    if (row[14]) return;
    //define email information
    var emailAddress = row[0];
    var emailSubject = "SCA LES FEVES - Vos documents de souscription";
    var message = "Bonjour, vous trouverez ci-joint les documents liés à votre souscription à la SCA LES FEVES. Toute l'équipe vous souhaite à nouveau la bienvenue dans l'aventure. Bien cordialement, Vincent KRAUS"
    //create attachments array with files generated by other functions
    var attachments = [];
    var attestation = DriveApp.getFileById(row[13]).getAs(MimeType.PDF);
      attachments.push(attestation);

    //create message body from template file
    var htmlBody = HtmlService.createTemplateFromFile('mail_template_cadeau_activated');
    htmlBody.firstname = row[2];
    htmlBody.nb_actions = row[7];
    // evaluate and get the html
    var email_html = htmlBody.evaluate().getContent();

    //send email
    MailApp.sendEmail(emailAddress, emailSubject, message, {htmlBody: email_html, attachments: attachments, bcc:'investir@feve.co',});
    var nowDate = new Date();
    sheet.getRange(index + 1, 15).setValue(nowDate);




  })

}
